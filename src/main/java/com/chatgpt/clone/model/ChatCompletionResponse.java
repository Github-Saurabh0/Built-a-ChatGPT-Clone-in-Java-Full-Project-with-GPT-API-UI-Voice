package com.chatgpt.clone.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

/**
 * Represents a response from the OpenAI chat completion API.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class ChatCompletionResponse {
    /**
     * The ID of the chat completion.
     */
    private String id;
    
    /**
     * The object type, which is always "chat.completion".
     */
    private String object;
    
    /**
     * The Unix timestamp (in seconds) of when the chat completion was created.
     */
    private long created;
    
    /**
     * The model used for the chat completion.
     */
    private String model;
    
    /**
     * The list of chat completion choices.
     */
    private List<Choice> choices;
    
    /**
     * The usage statistics for the completion.
     */
    private Usage usage;
    
    /**
     * Gets the content of the first choice's message.
     * 
     * @return The content as a String, or null if there are no choices
     */
    public String getFirstChoiceContent() {
        if (choices != null && !choices.isEmpty() && choices.get(0).getMessage() != null) {
            return choices.get(0).getMessage().getContent();
        }
        return null;
    }
    
    /**
     * Represents a single chat completion choice.
     */
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class Choice {
        /**
         * The index of this choice.
         */
        private int index;
        
        /**
         * The message generated by the model.
         */
        private Message message;
        
        /**
         * The reason why the model stopped generating text.
         */
        private String finish_reason;
    }
    
    /**
     * Represents the token usage statistics for the completion.
     */
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class Usage {
        /**
         * The number of tokens used in the prompt.
         */
        private int prompt_tokens;
        
        /**
         * The number of tokens used in the completion.
         */
        private int completion_tokens;
        
        /**
         * The total number of tokens used (prompt + completion).
         */
        private int total_tokens;
    }
}